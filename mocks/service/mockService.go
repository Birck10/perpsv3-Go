// Code generated by MockGen. DO NOT EDIT.
// Source: services/service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	big "math/big"
	reflect "reflect"

	models "github.com/gateway-fm/perpsv3-Go/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// FormatAccount mocks base method.
func (m *MockIService) FormatAccount(id *big.Int) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatAccount", id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatAccount indicates an expected call of FormatAccount.
func (mr *MockIServiceMockRecorder) FormatAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatAccount", reflect.TypeOf((*MockIService)(nil).FormatAccount), id)
}

// FormatAccounts mocks base method.
func (m *MockIService) FormatAccounts() ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatAccounts")
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatAccounts indicates an expected call of FormatAccounts.
func (mr *MockIServiceMockRecorder) FormatAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatAccounts", reflect.TypeOf((*MockIService)(nil).FormatAccounts))
}

// FormatAccountsLimit mocks base method.
func (m *MockIService) FormatAccountsLimit(limit uint64) ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatAccountsLimit", limit)
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatAccountsLimit indicates an expected call of FormatAccountsLimit.
func (mr *MockIServiceMockRecorder) FormatAccountsLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatAccountsLimit", reflect.TypeOf((*MockIService)(nil).FormatAccountsLimit), limit)
}

// GetPosition mocks base method.
func (m *MockIService) GetPosition(accountID, marketID *big.Int) (*models.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition", accountID, marketID)
	ret0, _ := ret[0].(*models.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosition indicates an expected call of GetPosition.
func (mr *MockIServiceMockRecorder) GetPosition(accountID, marketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockIService)(nil).GetPosition), accountID, marketID)
}

// RetrieveMarketUpdates mocks base method.
func (m *MockIService) RetrieveMarketUpdates(fromBlock uint64, toBLock *uint64) ([]*models.MarketUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveMarketUpdates", fromBlock, toBLock)
	ret0, _ := ret[0].([]*models.MarketUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMarketUpdates indicates an expected call of RetrieveMarketUpdates.
func (mr *MockIServiceMockRecorder) RetrieveMarketUpdates(fromBlock, toBLock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMarketUpdates", reflect.TypeOf((*MockIService)(nil).RetrieveMarketUpdates), fromBlock, toBLock)
}

// RetrieveOrders mocks base method.
func (m *MockIService) RetrieveOrders(fromBlock uint64, toBLock *uint64) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveOrders", fromBlock, toBLock)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveOrders indicates an expected call of RetrieveOrders.
func (mr *MockIServiceMockRecorder) RetrieveOrders(fromBlock, toBLock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveOrders", reflect.TypeOf((*MockIService)(nil).RetrieveOrders), fromBlock, toBLock)
}

// RetrieveTrades mocks base method.
func (m *MockIService) RetrieveTrades(fromBlock uint64, toBLock *uint64) ([]*models.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTrades", fromBlock, toBLock)
	ret0, _ := ret[0].([]*models.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveTrades indicates an expected call of RetrieveTrades.
func (mr *MockIServiceMockRecorder) RetrieveTrades(fromBlock, toBLock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTrades", reflect.TypeOf((*MockIService)(nil).RetrieveTrades), fromBlock, toBLock)
}
