// Code generated by MockGen. DO NOT EDIT.
// Source: events/events.go

// Package mock_events is a generated GoMock package.
package mock_events

import (
	reflect "reflect"

	events "github.com/gateway-fm/perpsv3-Go/events"
	gomock "github.com/golang/mock/gomock"
)

// MockIEvents is a mock of IEvents interface.
type MockIEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIEventsMockRecorder
}

// MockIEventsMockRecorder is the mock recorder for MockIEvents.
type MockIEventsMockRecorder struct {
	mock *MockIEvents
}

// NewMockIEvents creates a new mock instance.
func NewMockIEvents(ctrl *gomock.Controller) *MockIEvents {
	mock := &MockIEvents{ctrl: ctrl}
	mock.recorder = &MockIEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvents) EXPECT() *MockIEventsMockRecorder {
	return m.recorder
}

// ListenMarketUpdates mocks base method.
func (m *MockIEvents) ListenMarketUpdates() (*events.MarketUpdateSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenMarketUpdates")
	ret0, _ := ret[0].(*events.MarketUpdateSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenMarketUpdates indicates an expected call of ListenMarketUpdates.
func (mr *MockIEventsMockRecorder) ListenMarketUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenMarketUpdates", reflect.TypeOf((*MockIEvents)(nil).ListenMarketUpdates))
}

// ListenOrders mocks base method.
func (m *MockIEvents) ListenOrders() (*events.OrderSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenOrders")
	ret0, _ := ret[0].(*events.OrderSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenOrders indicates an expected call of ListenOrders.
func (mr *MockIEventsMockRecorder) ListenOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenOrders", reflect.TypeOf((*MockIEvents)(nil).ListenOrders))
}

// ListenTrades mocks base method.
func (m *MockIEvents) ListenTrades() (*events.TradeSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenTrades")
	ret0, _ := ret[0].(*events.TradeSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenTrades indicates an expected call of ListenTrades.
func (mr *MockIEventsMockRecorder) ListenTrades() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenTrades", reflect.TypeOf((*MockIEvents)(nil).ListenTrades))
}
